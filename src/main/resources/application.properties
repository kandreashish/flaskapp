# Server Configuration
server.port=8080
server.address=192.168.1.4

# Database Configuration - Local H2 database (fallback while remote is not accessible)
# spring.datasource.url=jdbc:h2:file:./data/h2/expensedb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;ACCESS_MODE_DATA=rw;
spring.datasource.username=h2user
spring.datasource.password=ashish123
spring.datasource.driver-class-name=org.h2.Driver

# Remote H2 Database Connection (uncomment when remote server is running):

spring.datasource.url=jdbc:h2:tcp://localhost:9092/var/lib/h2-data/expensedb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;ACCESS_MODE_DATA=rw;
# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true

# H2 Console (disable in production)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true

# JWT Configuration - Updated with secure 256-bit key
jwt.secret=MyVerySecureJWTSecretKeyThatIs256BitsLongForHMACAlgorithm123456789
jwt.expiration=86400000
jwt.refresh-expiration=604800000

# Firebase Configuration (loaded from environment variables)
firebase.type=${FIREBASE_TYPE:service_account}
firebase.project-id=${FIREBASE_PROJECT_ID}
firebase.private-key-id=${FIREBASE_PRIVATE_KEY_ID}
firebase.private-key=${FIREBASE_PRIVATE_KEY}
firebase.client-email=${FIREBASE_CLIENT_EMAIL}
firebase.client-id=${FIREBASE_CLIENT_ID}
firebase.auth-uri=${FIREBASE_AUTH_URI:https://accounts.google.com/o/oauth2/auth}
firebase.token-uri=${FIREBASE_TOKEN_URI:https://oauth2.googleapis.com/token}
firebase.auth-provider-cert-url=${FIREBASE_AUTH_PROVIDER_CERT_URL:https://www.googleapis.com/oauth2/v1/certs}
firebase.client-cert-url=${FIREBASE_CLIENT_CERT_URL}

# Logging
logging.level.com.lavish.expensetracker=INFO
logging.level.org.springframework.security=DEBUG
